SET ROLE 'postgres';

 

-- USE THIS IF WANTED ENUM DATA TYPE IN THE DATABASE. I REMOVED THIS BECAUSE OF ADDING AN EXCEL SHEET INTO THE DATABASE THAT CONTAIN VARIOUS NAMES

 

-- create type teamname_type AS ENUM ('CloudOps', 'PlatformOps', 'DevOps', 'ItOps', 'SRE');

-- create type reporter_type AS ENUM ('Sahil Bansal', 'Chitransh Sharma', 'Approva Sharma', 'Surya Kant');

-- create type leave_type AS ENUM ('Sick Leave', 'Casual Leave', 'Earned Leave');

 

-- create table if not exists employee (

--  id SERIAL primary key,

--  emp_name text,

--  team_name teamname_type,

--  leave_from date,

--  leave_to date,

--  leave_type leave_type,

--  reporter reporter_type,

--  attachment bytea,

--  status text default 'Pending'   

-- );

 

 

--  USE THIS IF NOT WANTED ENUM DATATYPE IN THE DATABASE. used this for sending excel sheet data using python

create table if not exists employee (

    id SERIAL primary key,

    emp_name text,

    team_name text,

    leave_from date,

    leave_to date,

    leave_type text,

    reporter text,

    attachment bytea,

    status text default 'Pending'   

);

 

create table if not exists notifications (

    id  integer ,

    reporter text,

    status text default 'Pending'

);

 

CREATE OR REPLACE FUNCTION update_notifications()

  RETURNS TRIGGER AS $$

BEGIN

    IF TG_OP = 'INSERT' THEN

        INSERT INTO notifications (id, reporter)

        VALUES (NEW.id, NEW.reporter);

    ELSIF TG_OP = 'UPDATE' THEN

        UPDATE notifications

        SET reporter = NEW.reporter

        WHERE id = OLD.id;

    END IF;

    RETURN NEW;

END;

$$ LANGUAGE plpgsql;

 

CREATE TRIGGER formdata_notifications_trigger

AFTER INSERT OR UPDATE ON public.employee

FOR EACH ROW

EXECUTE FUNCTION update_notifications();

 

 

CREATE VIEW August2022 AS

SELECT Count(emp_name) AS count FROM employee

WHERE leave_from > '2022-07-31' AND leave_to < '2022-09-01';

 

 

CREATE VIEW EmployeesUnderManager AS

select distinct reporter, count(DISTINCT emp_name) AS count FROM employee

WHERE leave_from > '2022-12-31' AND leave_to < '2023-04-01' GROUP BY reporter;

 

 

CREATE VIEW MaximumMonth2022 AS

SELECT TO_CHAR(TO_DATE(EXTRACT(MONTH FROM leave_from)::text, 'MM'), 'Month') as month,

SUM(leave_to - leave_from + 1) AS count FROM employee

WHERE leave_from > '2021-12-31' AND leave_to < '2022-12-31' AND leave_type = 'Sick Leave'

GROUP BY month ORDER BY count DESC LIMIT 1;

 

 

CREATE VIEW TeamRanking2022 AS

select team_name, count(leave_to - leave_from + 1) as count from employee

where leave_from > '2021-12-31' AND leave_to < '2023-01-01'

GROUP BY team_name ORDER BY count DESC;

 

 

CREATE VIEW TeamRanking2022Distribution AS

SELECT team_name, leave_type, count(leave_type) as leave_count FROM employee

WHERE leave_from > '2021-12-31' AND leave_to < '2023-01-01' AND team_name IN

(

    SELECT team_name from employee

    WHERE leave_from > '2021-12-31' AND leave_to < '2023-01-01'

    GROUP BY team_name ORDER BY count(leave_to - leave_from + 1) DESC LIMIT 2

)

GROUP BY team_name, leave_type ORDER BY team_name;

 

 

CREATE VIEW Top5Employees AS

SELECT emp_name, SUM(leave_to - leave_from + 1) AS count FROM employee

WHERE  leave_from > '2022-12-31' AND leave_to < '2023-12-31'

GROUP BY emp_name ORDER BY count DESC LIMIT 5;